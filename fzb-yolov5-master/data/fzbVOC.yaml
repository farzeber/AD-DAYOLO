# YOLOv5 üöÄ by Ultralytics, GPL-3.0 license
# PASCAL VOC dataset http://host.robots.ox.ac.uk/pascal/VOC by University of Oxford
# Example usage: python train.py --data VOC.yaml
# parent
# ‚îú‚îÄ‚îÄ yolov5
# ‚îî‚îÄ‚îÄ datasets
#     ‚îî‚îÄ‚îÄ VOC  ‚Üê downloads here (2.8 GB)


# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: D:/paper
strain: # train images (relative to 'path')  16551 images
  - codes/yolov5-master/datasets/VOC/images/train2012            # 5717
  - codes/yolov5-master/datasets/VOC/images/train2007            # 2501
  - codes/yolov5-master/datasets/VOC/images/val2012              # 5823
  - codes/yolov5-master/datasets/VOC/images/val2007              # 2510
ttrain:   #ExdarkWithoutTrainLabel output
  - dataset/ExdarkWithoutTrainLabel/images/train            # 2372
  - dataset/ExdarkWithoutTrainLabel/images/val            # 1590
val: # val images (relative to 'path')  2377 images
  - dataset/ExdarkWithoutTrainLabel/images/test
test: # test images (optional)
  - dataset/ExdarkWithoutTrainLabel/images/test

# Classes
nc: 10  # number of classes
names: ['bicycle', 'boat', 'bottle', 'bus', 'car', 'cat', 'chair', 'dog',
        'motorbike', 'person']  # class names


# Download script/URL (optional) ---------------------------------------------------------------------------------------
download: |
  import xml.etree.ElementTree as ET

  from tqdm import tqdm
  from utils.general import download, Path
  from zipfile import ZipFile

  def convert_label(path, lb_path, year, image_id):
      def convert_box(size, box):
          dw, dh = 1. / size[0], 1. / size[1]
          x, y, w, h = (box[0] + box[1]) / 2.0 - 1, (box[2] + box[3]) / 2.0 - 1, box[1] - box[0], box[3] - box[2]
          return x * dw, y * dh, w * dw, h * dh

      in_file = open(path / f'VOC{year}/Annotations/{image_id}.xml')
      out_file = open(lb_path, 'w')
      tree = ET.parse(in_file)
      root = tree.getroot()
      size = root.find('size')
      w = int(size.find('width').text)
      h = int(size.find('height').text)

      for obj in root.iter('object'):
          cls = obj.find('name').text
          if cls in yaml['names'] and not int(obj.find('difficult').text) == 1:
              xmlbox = obj.find('bndbox')
              bb = convert_box((w, h), [float(xmlbox.find(x).text) for x in ('xmin', 'xmax', 'ymin', 'ymax')])
              cls_id = yaml['names'].index(cls)  # class id
              out_file.write(" ".join([str(a) for a in (cls_id, *bb)]) + '\n')


  # Download
  dir = Path(yaml['path'])
  f = dir / 'images/VOCtrainval_06-Nov-2007.zip'
  ZipFile(f).extractall(path=(dir / 'images'))  # unzip
  f = dir / 'images/VOCtest_06-Nov-2007.zip'
  ZipFile(f).extractall(path=(dir / 'images'))  # unzip
  f = dir / 'images/VOCtrainval_11-May-2012.zip'
  ZipFile(f).extractall(path=(dir / 'images'))  # unzip
  
  # Convert
  path = dir / 'images/VOCdevkit'
  for year, image_set in ('2012', 'train'), ('2012', 'val'), ('2007', 'train'), ('2007', 'val'), ('2007', 'test'):
      imgs_path = dir / 'images' / f'{image_set}{year}'
      lbs_path = dir / 'labels' / f'{image_set}{year}'
      imgs_path.mkdir(exist_ok=True, parents=True)
      lbs_path.mkdir(exist_ok=True, parents=True)

      with open(path / f'VOC{year}/ImageSets/Main/{image_set}.txt') as f:
          image_ids = f.read().strip().split()
      for id in tqdm(image_ids, desc=f'{image_set}{year}'):
          f = path / f'VOC{year}/JPEGImages/{id}.jpg'  # old img path
          lb_path = (lbs_path / f.name).with_suffix('.txt')  # new label path
          f.rename(imgs_path / f.name)  # move image
          convert_label(path, lb_path, year, id)  # convert labels to YOLO format
